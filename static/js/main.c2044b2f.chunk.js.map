{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","card","handleClick","className","href","id","Jumbotron","ImageCard","onClick","name","alt","src","img","App","state","cards","currentScore","highScore","shuffleCards","data","i","length","randomIndex","Math","floor","random","valOne","valTwo","duplicateClick","newCards","map","console","log","clicked","newHighScore","localStorage","setItem","setState","initData","this","parseInt","getItem","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0m3BAuBeA,MApBf,YACE,OADqC,EAArBC,KAAqB,EAAfC,YAEpB,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,eAIA,yBAAKC,GAAG,UACN,8DAIF,yBAAKA,GAAG,UACN,+CACA,+C,MCHOC,MAXf,WACE,OACE,yBAAKH,UAAU,aACb,4CACA,yG,MCQSI,MAZf,YAA2C,IAAtBN,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAEzB,OACE,yBAAKC,UAAU,OAAOK,QAAS,kBAAIN,EAAYD,EAAKQ,QAClD,4BAAKR,EAAKQ,MACV,yBAAKN,UAAU,iBACb,yBAAKO,IAAKT,EAAKQ,KAAME,IAAKV,EAAKW,S,yOCoExBC,E,2MArEbC,MAAQ,CACNC,MAAO,GACPC,aAAc,EACdC,UAAW,G,EAObC,aAAe,SAAAC,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWN,EAAKE,QAE9CK,EAASP,EAAKC,GACdO,EAASR,EAAKG,GAElBH,EAAKC,GAAKO,EACVR,EAAKG,GAAeI,EAGtB,OAAOP,G,EAGTjB,YAAc,SAAAO,GACZ,IAAImB,GAAiB,EACfC,EAAW,EAAKf,MAAMC,MAAMe,KAAI,SAAA7B,GACpC,OAAIA,EAAKQ,OAASA,GAChBsB,QAAQC,IAAI/B,EAAKgC,SACbhC,EAAKgC,SACPL,GAAiB,EACV3B,G,yWAEA,CAAP,GACKA,EADL,CAEEgC,SAAS,KAIRhC,KAGT,GAAI2B,EAAgB,CAClBG,QAAQC,IAAI,aACZ,IAAME,EAAe,EAAKpB,MAAME,aAAe,EAAKF,MAAMG,UAAY,EAAKH,MAAME,aAAe,EAAKF,MAAMG,UAC3GkB,aAAaC,QAAQ,YAAaF,GAClC,EAAKG,SAAS,CAAEtB,MAAOuB,EAAUrB,UAAWiB,EAAclB,aAAc,SAExE,EAAKqB,SAAS,CAAEtB,MAAO,EAAKG,aAAaW,GAAWb,aAAc,EAAKF,MAAME,aAAe,K,mFA1C9FuB,KAAKF,SAAS,CAAEtB,MAAOwB,KAAKrB,aAAaoB,GAAWrB,UAAWuB,SAASL,aAAaM,QAAQ,eAAiB,M,+BA8CtG,IAAD,SACoCF,KAAKzB,MAAxCC,EADD,EACCA,MAAOC,EADR,EACQA,aAAcC,EADtB,EACsBA,UAG7B,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MADF,YAEYa,EAFZ,gBAEuCC,EACrC,kBAAC,EAAD,MAEEF,EAAMe,KAAI,SAAC7B,EAAMmB,GAAP,OAAa,kBAAC,EAAD,CAAWsB,IAAKtB,EAAI,cAAenB,KAAMA,EAAMC,YAAa,EAAKA,sB,GAhEhFyC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c2044b2f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar({ card, handleClick }) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\" >\n        Clicky Game\n      </a>\n\n      <div id=\"header\">\n        <p> Click images to score points </p>\n      </div>\n\n\n      <div id=\"scores\">\n        <p> Current Score: </p> \n        <p> High Score: </p>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <h1>Clicky Game!</h1>\n      <p>\n        Click on an image to earn points, but don't click on any more than once!\n      </p>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard({ card, handleClick }) {\n   \n  return (\n    <div className=\"card\" onClick={()=>handleClick(card.name)}>\n      <h3>{card.name}</h3>\n      <div className=\"img-container\">\n        <img alt={card.name} src={card.img} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport ImageCard from \"./components/ImageCard/index\";\nimport initData from './data.json'\n// import initData from '../../'\n\nclass App extends React.Component {\n  state = {\n    cards: [],\n    currentScore: 0,\n    highScore: 0\n  }\n\n  componentDidMount() {\n    this.setState({ cards: this.shuffleCards(initData), highScore: parseInt(localStorage.getItem(\"highScore\")) || 0 })\n  }\n\n  shuffleCards = data => {\n\n    for (let i = 0; i < data.length; i++) {\n      let randomIndex = Math.floor(Math.random() * data.length);\n\n      let valOne = data[i];\n      let valTwo = data[randomIndex];\n\n      data[i] = valTwo;\n      data[randomIndex] = valOne;\n    }\n\n    return data;\n  }\n\n  handleClick = name => {\n    let duplicateClick = false;\n    const newCards = this.state.cards.map(card => {\n      if (card.name === name) {\n        console.log(card.clicked)\n        if (card.clicked) {\n          duplicateClick = true;\n          return card;\n        } else {\n          return {\n            ...card,\n            clicked: true\n          }\n        }\n      }\n      return card;\n    })\n\n    if (duplicateClick) {\n      console.log(\"Game Over\");\n      const newHighScore = this.state.currentScore > this.state.highScore ? this.state.currentScore : this.state.highScore;\n      localStorage.setItem(\"highScore\", newHighScore)\n      this.setState({ cards: initData, highScore: newHighScore, currentScore: 0 })\n    } else {      \n      this.setState({ cards: this.shuffleCards(newCards), currentScore: this.state.currentScore + 1 })\n    }\n  }\n\n  render() {\n    const { cards, currentScore, highScore } = this.state;\n\n\n    return (\n      <div className=\"App\">\n        <Navbar />\n        current: {currentScore}, highscore: {highScore}\n        <Jumbotron />\n        {\n          cards.map((card, i) => <ImageCard key={i + '_card_set_1'} card={card} handleClick={this.handleClick} />)\n        }\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}